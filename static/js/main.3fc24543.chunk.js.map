{"version":3,"sources":["static-data.js","reducers/editMessage.js","reducers/index.js","reducers/user.js","reducers/contacts.js","reducers/activeUserId.js","actions/constants/action-types.js","reducers/typing.js","reducers/messages.js","store/index.js","actions/index.js","containers/User.js","components/Sidebar.js","components/Empty.js","components/Header.js","components/Chats.js","containers/MessageInput.js","containers/ChatWindow.js","components/Main.js","containers/App.js","serviceWorker.js","index.js"],"names":["numberOfUsers","shortid","require","txtgen","faker","_","users","Array","from","length","generateUser","contacts","mapKeys","getMessages","messagesPerUser","messages","forEach","user","numberOfMsgs","user_id","v","i","number","text","sentence","is_user_msg","random","boolean","is_edited","name","findName","email","internet","profile_pic","avatar","status","generate","combineReducers","state","activeUserId","action","type","payload","typing","message","userId","allUserMsgs","keys","pop","console","log","messageId","editMessage","isEditing","store","createStore","reducer","setTypingValue","value","handleUserClick","dispatch","User","className","onClick","bind","src","alt","Sidebar","map","contact","key","Empty","first_name","split","Header","Chat","getState","saveClickedMessage","handleEdit","Chats","props","scrollToBottom","chatsRef","current","scrollTop","scrollHeight","React","createRef","this","ref","Component","handleSubmit","e","preventDefault","writeEditedMessage","MessageInput","onSubmit","onChange","target","placeholder","ChatWindow","activeUser","activeChats","values","Main","App","Boolean","window","location","hostname","match","render","ReactDOM","document","getElementById","subscribe","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.3fc24543.chunk.js","sourcesContent":["const shortid = require(\"shortid\"); // shortid.generate() returns a unique \"short\" id\r\nconst txtgen = require(\"txtgen\"); // txtgen.sentence() returns random \"readable\" sentences\r\nconst faker = require(\"faker\"); // faker is used for generating random fake data.\r\nconst _ = require(\"lodash\"); // lodash is a utility lib for Javascript\r\n\r\nconst users = generateUsers(10);\r\nexport const contacts = _.mapKeys(users, \"user_id\");\r\nexport const getMessages = (messagesPerUser) => {\r\n  let messages = {};\r\n  _.forEach(users, (user) => {\r\n    messages[user.user_id] = {\r\n      ..._.mapKeys(generateMsgs(messagesPerUser), \"number\"),\r\n    };\r\n  });\r\n  return messages;\r\n};\r\n\r\n// just an example of how the state object is structured\r\nexport const state = {\r\n  user: generateUser(),\r\n  messages: getMessages(10),\r\n  typing: \"\",\r\n  contacts,\r\n  activeUserId: null,\r\n};\r\n\r\n/**\r\n * @returns {Object} - a new user object\r\n */\r\nexport function generateUser() {\r\n  return {\r\n    name: faker.name.findName(),\r\n    email: faker.internet.email(),\r\n    profile_pic: faker.internet.avatar(),\r\n    status: txtgen.sentence(),\r\n    user_id: shortid.generate(),\r\n  };\r\n}\r\n/**\r\n * @returns {Object} - a new message object\r\n */\r\nfunction generateMsg(number) {\r\n  return {\r\n    number,\r\n    text: txtgen.sentence(),\r\n    is_user_msg: faker.random.boolean(),\r\n    is_edited: false,\r\n  };\r\n}\r\n/**\r\n *\r\n * @param {Number} numberOfUsers - the number of users to be generated\r\n * @param {Function} generateUser - function that generates a single user\r\n * @returns {Array} - an array of user objects with length n = numberOfUsers\r\n */\r\nfunction generateUsers(numberOfUsers) {\r\n  return Array.from({ length: numberOfUsers }, () => generateUser());\r\n}\r\n\r\nfunction generateMsgs(numberOfMsgs) {\r\n  return Array.from({ length: numberOfMsgs }, (v, i) => generateMsg(i));\r\n}\r\n","import {\r\n  EDIT_MESSAGE,\r\n  SEND_MESSAGE,\r\n  SET_ACTIVE_USER_ID,\r\n} from \"../actions/constants/action-types\";\r\n\r\n// tellme whether current messege is edit version of some msg\r\nexport default (state = { isEditing: false, messageId: null }, action) => {\r\n  switch (action.type) {\r\n    case EDIT_MESSAGE:\r\n      const { messageId } = action.payload;\r\n      return { ...state, isEditing: true, messageId: messageId };\r\n    case SEND_MESSAGE:\r\n      return { ...state, isEditing: false, messageId: null };\r\n    case SET_ACTIVE_USER_ID:\r\n      return { ...state, isEditing: false, messageId: null };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import user from \"./user\";\r\nimport contacts from \"./contacts\";\r\nimport activeUserId from \"./activeUserId\";\r\nimport messages from \"./messages\";\r\nimport typing from \"./typing\";\r\nimport { combineReducers } from \"redux\";\r\nimport editMessage from \"./editMessage\";\r\nexport default combineReducers({\r\n  user,\r\n  contacts,\r\n  activeUserId,\r\n  typing,\r\n  messages,\r\n  editMessage,\r\n});\r\n","import { generateUser } from \"../static-data\";\r\nexport default function user(state = generateUser(), action) {\r\n  return state;\r\n}\r\n","import { contacts } from \"../static-data\";\r\n\r\nexport default (state = contacts, action) => {\r\n  return state;\r\n};\r\n","import { SET_ACTIVE_USER_ID } from \"../actions/constants/action-types\";\r\nexport default function activeUserId(state = null, action) {\r\n  switch (action.type) {\r\n    case SET_ACTIVE_USER_ID:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","export const SET_ACTIVE_USER_ID = \"SET_ACTIVE_USER_ID\";\r\nexport const SET_TYPING_VALUE = \"SET_TYPING_VALUE\";\r\nexport const SEND_MESSAGE = \"SEND_MESSAGE\";\r\nexport const EDIT_MESSAGE = \"EDIT_MESSAGE\";\r\nexport const SUBMIT_EDITED_MESSAGE = \"SUBMIT_EDITED_MESSAGE\";\r\n","import {\r\n  SET_TYPING_VALUE,\r\n  SEND_MESSAGE,\r\n  SUBMIT_EDITED_MESSAGE,\r\n  SET_ACTIVE_USER_ID,\r\n} from \"../actions/constants/action-types\";\r\n\r\nexport default function typing(state = \"\", action) {\r\n  switch (action.type) {\r\n    case SET_TYPING_VALUE:\r\n      return action.payload;\r\n    case SEND_MESSAGE:\r\n      return \"\";\r\n    case SUBMIT_EDITED_MESSAGE:\r\n      return \"\";\r\n    case SET_ACTIVE_USER_ID:\r\n      return \"\";\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { getMessages } from \"../static-data\";\r\nimport {\r\n  SEND_MESSAGE,\r\n  SUBMIT_EDITED_MESSAGE,\r\n} from \"../actions/constants/action-types\";\r\nimport _ from \"lodash\";\r\n\r\nexport default function messages(state = getMessages(10), action) {\r\n  switch (action.type) {\r\n    case SEND_MESSAGE: {\r\n      const { message, userId } = action.payload;\r\n      const allUserMsgs = state[userId];\r\n      const number = +_.keys(allUserMsgs).pop() + 1;\r\n      console.log(message, userId, action);\r\n      return {\r\n        ...state,\r\n        [userId]: {\r\n          ...allUserMsgs,\r\n          [number]: {\r\n            number,\r\n            text: message,\r\n            is_user_msg: true,\r\n            is_edited: false,\r\n          },\r\n        },\r\n      };\r\n    }\r\n    case SUBMIT_EDITED_MESSAGE: {\r\n      const { userId, messageId, message } = action.payload;\r\n      const allUserMsgs = state[userId];\r\n\r\n      return {\r\n        ...state,\r\n        [userId]: {\r\n          ...allUserMsgs,\r\n          [messageId]: {\r\n            number: messageId,\r\n            text: message,\r\n            is_user_msg: true,\r\n            is_edited: true,\r\n          },\r\n        },\r\n      };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}\r\n","import { createStore } from \"redux\";\r\nimport reducer from \"../reducers\";\r\nconst store = createStore(reducer);\r\nexport default store;\r\n","import {\r\n  SET_ACTIVE_USER_ID,\r\n  SET_TYPING_VALUE,\r\n  SEND_MESSAGE,\r\n  SUBMIT_EDITED_MESSAGE,\r\n  EDIT_MESSAGE,\r\n} from \"./constants/action-types\";\r\n\r\nexport const setActiveUserId = (id) => ({\r\n  type: SET_ACTIVE_USER_ID,\r\n  payload: id,\r\n});\r\n\r\nexport const setTypingValue = (value) => ({\r\n  type: SET_TYPING_VALUE,\r\n  payload: value,\r\n});\r\n\r\nexport const sendMessage = (message, userId) => ({\r\n  type: SEND_MESSAGE,\r\n  payload: {\r\n    message,\r\n    userId,\r\n  },\r\n});\r\n\r\nexport const saveClickedMessage = (messageId, userId) => ({\r\n  type: EDIT_MESSAGE,\r\n  payload: {\r\n    userId,\r\n    messageId,\r\n  },\r\n});\r\n\r\nexport const writeEditedMessage = (userId, messageId, message) => ({\r\n  type: SUBMIT_EDITED_MESSAGE,\r\n  payload: {\r\n    userId,\r\n    messageId,\r\n    message,\r\n  },\r\n});\r\n","import React from \"react\";\r\nimport \"./User.css\";\r\nimport store from \"../store\";\r\nimport { setActiveUserId } from \"../actions\";\r\n\r\nconst User = ({ user }) => {\r\n  const { name, profile_pic, status } = user;\r\n\r\n  return (\r\n    <div className=\"User\" onClick={handleUserClick.bind(null, user)}>\r\n      <img src={profile_pic} alt={name} className=\"User__pic\" />\r\n      <div className=\"User__details\">\r\n        <p className=\"User__details-name\">{name}</p>\r\n        <p className=\"User__details-status\">{status}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction handleUserClick({ user_id }) {\r\n  console.log(user_id);\r\n  store.dispatch(setActiveUserId(user_id));\r\n}\r\nexport default User;\r\n","import React from \"react\";\r\nimport \"./Sidebar.css\";\r\nimport User from \"../containers/User\";\r\n\r\nconst Sidebar = ({ contacts }) => {\r\n  return (\r\n    <aside className=\"Sidebar\">\r\n      {contacts.map((contact) => (\r\n        <User user={contact} key={contact.user_id} />\r\n      ))}\r\n    </aside>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React from \"react\";\r\nimport \"./Empty.css\";\r\n\r\nconst Empty = ({ user }) => {\r\n  const { name, profile_pic, status } = user;\r\n  const first_name = name.split(\" \")[0];\r\n\r\n  return (\r\n    <div className=\"Empty\">\r\n      <h1 className=\"Empty__name\">Welcome, {first_name} </h1>\r\n      <img src={profile_pic} alt={name} className=\"Empty__img\" />\r\n      <p className=\"Empty__status\">\r\n        <b>Status:</b> {status}\r\n      </p>\r\n      <button className=\"Empty__btn\">Start a conversation</button>\r\n      <p className=\"Empty__info\">\r\n        Search for someone to start chatting with or go to Contacts to see who\r\n        is available\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Empty;\r\n","import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nfunction Header({ user }) {\r\n  const { name, status } = user;\r\n  return (\r\n    <header className=\"Header\">\r\n      <h1 className=\"Header__name\">{name}</h1>\r\n      <p className=\"Header__status\">{status}</p>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport { setTypingValue, saveClickedMessage } from \"../actions\";\r\n\r\nimport \"./Chats.css\";\r\nimport store from \"../store\";\r\n\r\nconst Chat = ({ message }) => {\r\n  const { text, is_user_msg, is_edited, number } = message;\r\n  return (\r\n    <span\r\n      onClick={is_user_msg ? () => handleEdit(text, number) : null}\r\n      className={`Chat ${is_user_msg ? \"is-user-msg\" : \"\"}`}\r\n    >\r\n      {text}\r\n      {is_edited ? \" (edited)\" : \"\"}\r\n    </span>\r\n  );\r\n};\r\n\r\nclass Chats extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.chatsRef = React.createRef();\r\n  }\r\n  componentDidMount() {\r\n    this.scrollToBottom();\r\n  }\r\n  componentDidUpdate() {\r\n    this.scrollToBottom();\r\n  }\r\n  scrollToBottom = () => {\r\n    this.chatsRef.current.scrollTop = this.chatsRef.current.scrollHeight;\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"Chats\" ref={this.chatsRef}>\r\n        {this.props.messages.map((message) => (\r\n          <Chat message={message} key={message.number} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction handleEdit(message, messageId) {\r\n  // console.log(\"user chat cicked\", number);\r\n  const { activeUserId } = store.getState();\r\n  store.dispatch(setTypingValue(message));\r\n  store.dispatch(saveClickedMessage(messageId, activeUserId));\r\n}\r\n\r\nexport default Chats;\r\n","import React from \"react\";\r\nimport store from \"../store\";\r\nimport { setTypingValue, sendMessage, writeEditedMessage } from \"../actions\";\r\nimport \"./MessageInput.css\";\r\n\r\nconst MessageInput = ({ value }) => {\r\n  const handleChange = (e) => {\r\n    store.dispatch(setTypingValue(e.target.value));\r\n  };\r\n\r\n  return (\r\n    <form className=\"Message\" onSubmit={handleSubmit}>\r\n      <input\r\n        className=\"Message__input\"\r\n        onChange={handleChange}\r\n        value={value}\r\n        placeholder=\"write a message\"\r\n      />\r\n    </form>\r\n  );\r\n};\r\nconst handleSubmit = (e) => {\r\n  e.preventDefault();\r\n  const { typing, activeUserId, editMessage } = store.getState();\r\n  if (!editMessage.isEditing) {\r\n    console.log(typing, activeUserId, \"new message from user\");\r\n\r\n    store.dispatch(sendMessage(typing, activeUserId));\r\n  } else {\r\n    store.dispatch(\r\n      writeEditedMessage(activeUserId, editMessage.messageId, typing)\r\n    );\r\n  }\r\n};\r\n\r\nexport default MessageInput;\r\n","import React from \"react\";\r\nimport _ from \"lodash\";\r\nimport store from \"../store\";\r\nimport Header from \"../components/Header\";\r\nimport Chats from \"../components/Chats\";\r\nimport \"./ChatWindow.css\";\r\nimport MessageInput from \"./MessageInput\";\r\n\r\nconst ChatWindow = ({ activeUserId }) => {\r\n  const state = store.getState();\r\n  const activeUser = state.contacts[activeUserId];\r\n  const activeChats = state.messages[activeUserId];\r\n  const { typing } = state;\r\n\r\n  return (\r\n    <div className=\"ChatWindow\">\r\n      <Header user={activeUser} />\r\n      <Chats messages={_.values(activeChats)} />\r\n      <MessageInput value={typing} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatWindow;\r\n","import React from \"react\";\r\nimport \"./Main.css\";\r\nimport Empty from \"../components/Empty\";\r\nimport ChatWindow from \"../containers/ChatWindow\";\r\n\r\nconst Main = ({ user, activeUserId }) => {\r\n  const renderMainContent = () => {\r\n    if (!activeUserId) {\r\n      return <Empty user={user} activeUserId={activeUserId} />;\r\n    } else {\r\n      return <ChatWindow activeUserId={activeUserId} />;\r\n    }\r\n  };\r\n  return <main className=\"Main\">{renderMainContent()}</main>;\r\n};\r\n\r\nexport default Main;\r\n","import React from \"react\";\nimport Sidebar from \"../components/Sidebar\";\nimport Main from \"../components/Main\";\nimport \"./App.css\";\nimport store from \"../store\";\nimport _ from \"lodash\";\n\nconst App = () => {\n  const { contacts, user, activeUserId } = store.getState();\n  return (\n    <div className=\"App\">\n      <Sidebar contacts={_.values(contacts)} />\n      <Main user={user} activeUserId={activeUserId} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport store from \"./store\";\n\nconst render = () => {\n  fancyLog();\n  ReactDOM.render(<App />, document.getElementById(\"root\"));\n};\n\nfunction fancyLog() {\n  console.log(\"%c Rendered with ? ??\", \"background: purple; color: #FFF\");\n  console.log(store.getState());\n}\n\nrender();\nstore.subscribe(render);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}